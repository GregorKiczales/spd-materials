

start with table to summarize last class


-path

we have a function that produces Boolean but carries path
shouldn't be too hard to get it to produce path...

(@signature Maze -> (listof Pos) or false)

skip tests for now, they will be cumbersome to type

            (cond [(solved? p) (reverse (cons p path))]

try it -- tests fail of course

SOMETIMES, and you saw this w/ pset-9, it's hard to predict the result
and/or the result is difficult to type. in such cases it's ok to first
run the function, then check the result, then copy the result back into
the tests.  In a spatial problem like this it can help to render the
result so you get to use visual cortex.

To help with this render-maze-w/path.

do the first one. Say they should do rest after class.

:11


-shortest path.

Now we want the shortest path only - or fail of course

remember that it is structural recursion

again, let's skip the tests for now

ask class to take a minute to think about WHERE in the code changes

ask people to say WHERE ONLY, not what (cut off immediately if what)

talk about combination position,

:20

then give class 6-8 minutes to make the change to local expression only

:28

develop and discuss

                   ;; this is the combination position where we can compare
                   ;; two paths...
                   (local [(define try1 (solve/p (first lop) path))  
                           (define try2 (solve/lop (rest lop) path))]
                     ;; (@template-origin 2-one-of)
                     ;;      try2        false         (listof Pos)
                     ;; try1               
                     ;;
                     ;; false            t2            t2
                     ;;
                     ;; (listof Pos)     t1            (<shorter> try1 try2)
                     ;;
                     (cond [(false? try1) try2]
                           [(false? try2) try1]
                           [else
                            (if (<= (length try1) (length try2))
                                try1
                                try2)]))]))

need both results now, but both could be a result or fail
blending of 2 try-catch

good chance here to talk about how stuff like 2-one-of and acc progression
examples were never to make me happy, they were to help you write the function

(took too long on 2-one-of in afternoon)

again, we can hand check the test results


-path-length-tr
:48

what accumulators do we need:

 tr --> worklist
 path-length --> tandem worklist (accumulates along paths in the data)
 prevent cycles and joins --> visited

class works :54

I knew how to program when the course started.  Working on these
maze functions I feel:

A - confident I could have solved these problems before course started
B - maybe I could have  solved these problems before course started
C - fairly sure I could not have solved these problems before course started

          ;; trivial:   reaches lower right, previously seen position
          ;; reduction: move up, down, left, right if possible
          ;; argument:  maze is finite, so moving will eventually
          ;;            reach trivial case or run out of moves
          
          ;; tail recursion, with visited accumulator, tandem worklists
          ;; p-wl    is (listof Pos);     position (node) worklist
	  ;; c-wl    is (listof Natural); count worklist
	  ;; INVARIANT: p-wl and c-wl always have same length, the
	  ;;            elements of the two work lists correspond
	  ;;            with each other - the nth element of c-wl
	  ;;            is the number of steps in the path in the
	  ;;            maze to reach the nth element of p-wl
          ;; visited is (listof Pos); every position ever visited
          (define (solve/p p c p-wl c-wl visited)
            (cond [(solved? p) (add1 c)]
                  [(member p visited) (solve/lop p-wl c-wl visited)]
                  [else
                   (solve/lop
		    (append                    (next-ps p)            p-wl)
		    (append (make-list (length (next-ps p)) (add1 c)) c-wl)
		    (cons p visited))]))

          (define (solve/lop p-wl c-wl visited)
            (cond [(empty? p-wl) false]
                  [else
                   (solve/p (first p-wl)
			    (first c-wl)
			    (rest p-wl)
			    (rest c-wl)
                            visited)]))
