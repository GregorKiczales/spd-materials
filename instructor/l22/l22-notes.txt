



(define (first-out-of-order map num0)
  ;; nn-wl is (listof Natural);   worklist of node numbers
  ;; visited is (listof Natural); numbers of nodes already visited in the tr
  (local [(define (fn-for-node n nn-wl visited)
            (local [(define num (node-number n))
                    (define nexts (node-nexts n))
                    (define nvisited (cons num visited))]
              (cond [(member num visited) (fn-for-lonn nn-wl visited)]
                    [(not (= num (add1 (first visited)))) num]
                    [else
                     (fn-for-lonn (append nexts nn-wl) nvisited)])))
          
          (define (fn-for-lonn nn-wl visited)
            (cond [(empty? nn-wl) false] 
                  [else
                   (fn-for-node (generate-node map (first nn-wl))
                                (rest nn-wl)
                                visited)]))]
    
    (fn-for-lonn (node-nexts (generate-node map num0))
                 (list num0))))


(define (first-out-of-order-path map num0)
  
  ;; nn-wl is (listof Natural); worklist of node numbers
  ;; p-wl is (listof (listof Natural)); tandem worklist of paths
  ;; visited is (listof Natural); numbers of nodes already visited in the tr
  
  (local [(define (fn-for-node n path  nn-wl path-wl  visited)
            (local [(define num      (node-number n))
                    (define nexts    (node-nexts n))
                    (define npath    (cons num path))
                    (define nvisited (cons num visited))]
              (cond [(member num visited) (fn-for-lonn nn-wl path-wl visited)]
                    [(not (= num (add1 (first visited)))) (reverse npath)]
                    [else
                     (fn-for-lonn (append nexts
                                          nn-wl)
                                  (append (make-list (length nexts) npath)
                                          path-wl)
                                  nvisited)])))
          
          (define (fn-for-lonn nn-wl path-wl visited)
            (cond [(empty? nn-wl) false] 
                  [else
                   (fn-for-node (generate-node map (first nn-wl))
                                (first path-wl)
                                (rest nn-wl)
                                (rest path-wl)
                                visited)]))]
    
    (fn-for-lonn (node-nexts (generate-node map num0))
                 (make-list (length (node-nexts (generate-node map num0)))
                            (list num0))
                 (list num0))))
