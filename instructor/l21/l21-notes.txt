
intro (3 slides)


2 problems today

we will work fairly slowly, these use everything we did last time

quick reminder of graphs, how 4 way maze is a graph, and the cycles problem

start with 2 clickers, participation, to prime peoples thinking


!!! add more generic cycle join pictures to deck and work with those when doing the two functions, so the function of the more abstract slides is to bridge to that style of picture

!!! take try catch out of templates

!!! rename to distance-between




solvable-no-revisits

use slides to review what it needs to do

graph picture

at the cycle - do we want to go this way? how might we stop?

at the join  - do we want to go this way? how might we stop?

 - requires visited --> requires tail recursive (that order)

first make it TR w/ worklist (or can use templates)
then add visited
then add termination argument


          ;; tail recursion, with visited accumulator

          ;; trivial:   reaches lower right, previously seen position
          ;; reduction: move up, down, left, right if possible

	  ;; argument:  maze is finite, so moving will eventually
          ;;            reach trivial case or run out of moves
	  
          ;; p-wl is    (listof Pos); worklist
          ;; visited is (listof Pos); every position ever visited
	  
          (define (solve/p p p-wl visited)
            (cond [(solved? p) true]
                  [(member p visited)
                   (solve/lop                     p-wl          visited)]
                  [else
                   (solve/lop (append (next-ps p) p-wl) (cons p visited))]))

          (define (solve/lop p-wl visited)
            (cond [(empty? p-wl) false]
                  [else
                   (solve/p (first p-wl) (rest p-wl) visited)]))


- discuss/questions
  - how to fail in tail recursion - proceed w/ rest of list
  - is it backtracking search? yes, even though no try-catch
  


- start adding path
  - add [(member p path) false]

- but then we need distance
  - take out [(solved? p) ...]
  - couple ways to do it
     - compute it from the path
     - a separate accumulator

- come back and take contributions to do:
  - type and invariant, add param, initialize, preserve, already exploited
  - termination argument
  - other tests

- discuss (1 slide)
  - lots of questions come up here ~ 10 minutes


(define (distance-from m start end)
  (local [(define R (sqrt (length m)))	  

          ;; trivial:   
          ;; reduction: 
          ;; argument:
           
          (define (fn-for-p p path passed-start?)
            (cond [(equal? p end)   (add1 (position-of start path))]
                 ;[(solved? p)      false]
                  [(member? p path) false]
                  [else
                   (if (equal? p start)
                       (fn-for-lop (next-ps p) (cons p path) true)
                       (fn-for-lop (next-ps p) (cons p path) passed-start?))]))

          (define (fn-for-lop lop path dist)
            (cond [(empty? lop) false]
                  [else
                   (local [(define try (fn-for-p (first lop) path dist))]
                     (if (not (false? try))
                         try
                         (fn-for-lop (rest lop) path dist)))]))

          ;; CONSTRAINT: p is in lop
          (define (position-of p lop)
            (cond [(empty? p) (error "p was not in lop")]
                  [else
                   (if (equal? p (first lop))
                       0
                       (add1 (position-of p (rest lop))))]))
          
