

Take 1 exam question?

Ada Lovelace Day? (October)

Do 2 or three arrows: fn-for-cat, ListOfCat, Cat
End up with 2 pairs of colored arrows


Complete boxes quickly.
 - show examples, recursive structure of examples
 - show template
 - fills in just like recursion on a list
 - MUST COMPLETE THIS STARTER

(define (boxes n)
  (cond [(zero? n) (square 1 "outline" "black")]
        [else
         (overlay (square (+ 1 (* n 10)) "outline" "black")
                  (boxes (sub1 n)))]))

THEY MUST COMPLETE AND SUBMIT FILE BY 10PM

;; arrange-images-starter.rkt (problem statement)
;; arrange-images-v1.rkt      (includes ListOfImage)
;; arrange-images-v2.rkt      (+ arrange-images and 2 wish-list entries)
;; arrange-images-v3.rkt      (+ layout-images, stub for sort-images)
;; arrange-images-v4.rkt      (+ sort-images and stub for insert)
;; arrange-images-v5.rkt      (+ insert and stub for larger?)
;; arrange-images-v6.rkt      (+ larger?)

using example from videos because of midterm

arrange-images

slide, overview


start w/ v2
 must sort entire list before rendering any
 reject listof template
    fn composition rule
 add origin, template, fn-definition and wish list entries

(@template-origin fn-composition)
(define (arrange-images loi)
  (layout-images (sort-images loi)))

(@htdf layout-images)
(@signature ListOfImage -> Image)
;; place images beside each other in order of list
;; !!!
(define (layout-images loi) empty-image) ;stub

(@htdf sort-images)
(@signature ListOfImage -> ListOfImage)
;; sort images in increasing order of size 
;; !!!
(define (sort-images loi) loi)

go to v3, has layout- done and wish-list for sort

30  sort images use V3   (class up to arb-sized)
    arb-sized data rule
    remember to add CONSTRAINT to wish list entry for insert

(@htdf sort-images)
(@signature ListOfImage -> ListOfImage)
;; sort images in increasing order of size (area)
(check-expect (sort-images empty) empty)
(check-expect (sort-images (cons I1 (cons I2 empty)))
              (cons I1 (cons I2 empty))) 
(check-expect (sort-images (cons I2 (cons I1 empty)))
              (cons I1 (cons I2 empty)))  
(check-expect (sort-images (cons I3 (cons I1 (cons I2 empty))))
              (cons I1 (cons I2 (cons I3 empty))))
(check-expect (sort-images (cons I3 (cons I2 (cons I1 empty))))
              (cons I1 (cons I2 (cons I3 empty))))    

;(define (sort-images loi) loi)

(@template-origin ListOfImage)

(@template
 (define (sort-images loi)
   (cond [(empty? loi) (...)]
         [else
          (... (first loi)
               (sort-images (rest loi)))])))

(define (sort-images loi)
  (cond [(empty? loi) empty]
        [else
         (insert (first loi)   
                 (sort-images (rest loi)))])) ;result of NR will be sorted

35  insert use V4  (class, let them diverge on wish for larger)

(@htdf insert)
(@signature Image ListOfImage -> ListOfImage)
;; insert img in proper place in loi (in increasing order of size)
;; CONSTRAINT: loi is sorted
(check-expect (insert I1 empty)
              (cons I1 empty))
(check-expect (insert I1 (cons I2 (cons I3 empty)))
              (cons I1 (cons I2 (cons I3 empty))))
(check-expect (insert I2 (cons I1 (cons I3 empty)))
              (cons I1 (cons I2 (cons I3 empty))))
(check-expect (insert I3 (cons I2 (cons I3 empty)))
              (cons I2 (cons I3 (cons I3 empty))))

;(define (insert img loi) loi) ;stub

(@template-origin ListOfImage)

(@template
 (define (insert img loi)
   (cond [(empty? loi) (... img)]
         [else 
          (... img
               (first loi) 
               (insert img (rest loi)))])))

(define (insert img loi)
  (cond [(empty? loi) (cons img empty)]
        [else  
         (if (larger? img (first loi))
             (cons (first loi)  
                   (insert img
                           (rest loi)))
             (cons img loi))]))

15  insert wish for larger (present)

(@htdf larger?)
(@signature Image Image -> Boolean) 
;; produce true if img1 has area > img 2
(check-expect (larger? (rectangle 10 20 "solid" "black")
                       (rectangle 10 20 "solid" "black"))
              false)    
(check-expect (larger? (rectangle 11 20 "solid" "black")
                       (rectangle 10 20 "solid" "black"))
              true)
(check-expect (larger? (rectangle 10 21 "solid" "black")
                       (rectangle 10 20 "solid" "black"))
              true) 
(check-expect (larger? (rectangle 10 20 "solid" "black")
                       (rectangle 11 20 "solid" "black"))
              false)     
(check-expect (larger? (rectangle 10 20 "solid" "black")
                       (rectangle 10 21 "solid" "black"))
              false)   

;(define (larger? img1 img2) true) ;stub

(@template-origin Image)

(@template
 (define (larger? img1 img2)
   (... img1 img2)))

(define (larger? img1 img2)   
  (> (* (image-width img1) (image-height img1)) 
     (* (image-width img2) (image-height img2))))
  
