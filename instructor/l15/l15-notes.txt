


intro slides up through marked up call/return tree [present]

12:00 class starts on first starter         [class]
20:00 interrupt to give check-expects       [present]
25:00 class keeps working                   [class]
30:00 take over function, slowly develop it [present]

clickers

lambda [present]


-20:00 show cantor picture
       design cantor
-15:00 take over cantor, paste parts in and discuss



Intro -

done learning NR - will move on to genrec
will continue to use NR all the time

brief difference between  natural recursion (SR) and genrec


setup qsort by walking through picture
xition to starter
class works

interrupt to setup that it's two filters




;;                   (list 6 8 1 9 3 7 2) 
;;                   /         |        \
;;                  /          |         \
;;        (list 1 3 2)         6        (list 8 9 7)
;;         /  |  \                         /    |    \
;;        /   |   \                       /     |     \
;;     empty  1 (list 3 2)          (list 7)    8    (list 9)
;;                /  |  \             / | \           /  |  \
;;               /   |   \           /  |  \         /   |   \
;;          (list 2) 3  empty     empty 7 empty    empty 9  empty
;;           /  |  \
;;        empty 2 empty


12:00
;; Please design a function that does quicksort
(@problem 1)
(@htdf qsort)
(@signature (listof Number) -> (listof Number))
;; use quicksort to produce list of numbers in ascending order
;; CONSTRAINT there are no duplicates

20:00 interrupt to give check-expects
(check-expect (qsort (list)) (list))
(check-expect (qsort (list 2)) (list 2))
(check-expect (qsort (list 5 4 6)) (list 4 5 6))
(check-expect (qsort (list 6 5 4)) (list 4 5 6)) ;all < pivot
(check-expect (qsort (list 4 6 5)) (list 4 5 6)) ;all > pivot
(check-expect (qsort (list 3 1 5 2 4 6)) (list 1 2 3 4 5 6))
(check-expect (qsort (list 8 3 11 1 12 5 2 10 4 6))
              (list 1 2 3 4 5 6 8 10 11 12))

(@template-origin genrec use-abstract-fn)

What's the trivial test? Trivial result?

Is there just one recursive call? ...

call this the pivot (p)

what's the argument to this recursive call?   (filter <p? (wish))
what's the argument to this recursive call?   (filter >p? (wish))


(define (qsort lon)
  ;; Base case: empty
  ;; Reduction: strict subset (at least one element removed) from lon
  ;; Argument: repeated strict subset of list always reaches empty
  (cond [(empty? lon) empty]    
        [else     
         (local [(define p (first lon))
                 (define (<p? x) (< x p))    
                 (define (>p? x) (> x p))]

           WRITE w/o REST AT FIRST, CHANGE AS PART OF TA

           
           (append (qsort (filter <p? (rest lon)))
                   (list p)     
                   (qsort (filter >p? (rest lon)))))]))


Now discuss genrec again
  show that they are new lists
  but form a strict subset because of first/rest
  do the argument

  ;; Base case: empty
  ;; Reduction: strict subset (at least one element removed) from lon
  ;; Argument: repeated strict subset of list always reaches empty

clickers, all sections same problems

A, C, C

C, ???




Those local functions:
- are small
- used only one place
- the body is as clear as the name

---> use lambda


#;  ;this version uses lambda
(define (qsort lon)
  ;; Base case: empty
  ;; Reduction: strict subset of lon
  ;; Argument: repeated strict subset of list always reaches empty
  (cond [(empty? lon) empty]
        [else
         (local [(define p (first lon))]
           (append (qsort (filter (lambda (x) (< x p)) lon))
                   (list p)
                   (qsort (filter (lambda (x) (> x p))  lon))))]))



-25:00

QUICKLY
show picture, say it is (cantor 300)
encourage them to draw picture
let them work

after a couple of minutes slowly start marking up image



(define CUTOFF 4)

(@htdf cantor)
(@signature Number -> Image)
;; Produce cantor set image of given width
;; CONSTRAINT: w >= 0
(check-expect (cantor 0)
              (rectangle 0             BAR-HEIGHT "solid" BAR-COLOR))
(check-expect (cantor (sub1 CUTOFF))
              (rectangle (sub1 CUTOFF) BAR-HEIGHT "solid" BAR-COLOR))
(check-expect (cantor CUTOFF)
              (rectangle CUTOFF        BAR-HEIGHT "solid" BAR-COLOR))

(check-expect (cantor (* 3 CUTOFF))
              (above (rectangle (* 3 CUTOFF) BAR-HEIGHT "solid" BAR-COLOR)
                     (rectangle (* 3 CUTOFF) GAP-HEIGHT "solid" SPACER-COLOR)
                     (beside (cantor CUTOFF)
                             (rectangle CUTOFF BAR-HEIGHT "solid" SPACER-COLOR)
                             (cantor CUTOFF))))

(@template-origin genrec)

(define (cantor w)
  ;; base case:  w <= CUTOFF, (note CUTOFF is > 0)
  ;; reduction:  w / 3
  ;; argument:   repeated division by 3 approaches 0, so will get below CUTOFF 
  
  (cond [(<= w CUTOFF) (rectangle w BAR-HEIGHT "solid" BAR-COLOR)]
        [else
         (local [(define w/3 (/ w 3))
                 (define top (rectangle w BAR-HEIGHT "solid" BAR-COLOR))
                 (define gap (rectangle w GAP-HEIGHT "solid" SPACER-COLOR))
                 (define l&r (cantor w/3))
                 (define spc (rectangle w/3 BAR-HEIGHT "solid" SPACER-COLOR))]
           (above top
                  gap
                  (beside l&r spc l&r)))]))


Arrange to discuss that in case of cutoff result must have size w, not size CUTOFF
If there's time just try it, so that can see what that kind of problem looks like,
and also to teach just trying it.
