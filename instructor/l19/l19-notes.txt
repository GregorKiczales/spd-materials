



acc overview slide, what we have done

plan for 4 lectures slide

observe that sequence? is TR

explain TR

do clickers together
	identify tail pos, tail recursion

derive rev by starting with copy and forcing it to be tail recursive
then do type and invariant

called rev because default in TR is...


mention foldr and foldr



explain tree dd, example data

what if we want to know if a tree is top-to-bottom sorted
when we get here we need to know what???

interactive develop of top-to-bottom


show on call return picture, make clear it can't do l->r sorted


do a TR function,

derive worklist progression on picture


----------


; start w/ fn-for-lox template


(define (fn-for-lox lox)
  (cond [(empty? lox) (...)]
        [else
         (... (first lox)
              (fn-for-lox (rest lox)))]))


; make it copy

(check-expect (fn-for-lox (list 1 2 3)) (list 1 2 3))

(define (fn-for-lox lox0)
  (cond [(empty? lox) empty]                ;base is empty
        [else
         (cons (first lox)                  ;combination is cons
               (fn-for-lox (rest lox)))]))

; but not TR

(define (fn-for-lox lox rsf)
  (cond [(empty? lox) empty]
        [else
         (fn-for-lox (rest lox))]))         ;tail recursive, but result always empty


; step 1 of acc refactoring

(define (rev lox0)                          ;setup for accumulator named 'rsf'
  ;; rsf is 
  (local [(define (fn-for-lox lox rsf)
            (cond [(empty? lox) empty]
                  [else
                   (fn-for-lox (rest lox)
                               ...rsf)]))]
    (fn-for-lox lox0 ...)))


(define (rev lox0)
  ;; rsf is ...
  (local [(define (fn-for-lox lox rsf)
            (cond [(empty? lox) empty]
                  [else
                   (fn-for-lox (rest lox)
                               (cons (first lox)      ;combination moves 
                                     rsf))]))]        ;into rsf update
    (fn-for-lox lox0 empty)))


(define (rev lox0)
  ;; rsf is (listof X); result so far
  ;;                    elements of lox0 seen so far in reverse order
  ;;
  ;; (fn-for-lox (list 1 2 3) (list))
  ;; (fn-for-lox (list   2 3) (list 1))
  ;; (fn-for-lox (list     3) (list 2 1))
  ;; (fn-for-lox (list      ) (list 3 2 1))
  (local [(define (fn-for-lox lox rsf)
            (cond [(empty? lox) rsf]
                  [else
                   (fn-for-lox (rest lox)
                               (cons (first lox)      ;combination moves 
                                     rsf))]))]        ;into rsf update
    (fn-for-lox lox0 empty)))


do accumulator progression and design on picture first


(define (top->bot-sorted? t0)
  ;; pnum is Integer; immediate parent node's number
  ;; **parent means the parent in the tree **
  (local [(define (fn-for-t t pnum)
            (local [(define number (node-number t))  ;unpack the fields
                    (define subs (node-subs t))]     ;for convenience

              ;; what do we need when we get here??? 

              (if (> number pnum)
                  (fn-for-lot subs number)
                  false)))
          
          (define (fn-for-lot lot pnum)
            (cond [(empty? lot) true]
                  [else
                   (and (fn-for-t (first lot) pnum)
                        (fn-for-lot (rest lot) pnum))]))]
    
    (fn-for-lot (node-subs t0) (node-number t0))))


just do the TR. 

(define (top/left->bot/right-sorted? t0)
  ;; t-wl is (listof Tree); worklist of Trees to visit
  ;;                        unvisited direct subs of visited trees
  ;; vnum is Integer; node number of most recently VISITED node
  ;; ** visited means in the dynamic flow of the tail recursion **
  ;; ** not in the static structure of the tree                 **
  (local [(define (fn-for-t t t-wl vnum)
            (local [(define number (node-number t))  ;unpack the fields
                    (define subs (node-subs t))]     ;for convenience
              (if (> number vnum)
                  (fn-for-lot (append subs t-wl) number)
                  false)))
          
          (define (fn-for-lot t-wl vnum)
            (cond [(empty? t-wl) true]
                  [else
                   (fn-for-t (first t-wl) (rest t-wl) vnum)]))]
    
    (fn-for-t t0 empty (sub1 (node-number t0)))))


find-tree/sr
	interactive
	familiar blending of SR and try-catch


find-tree/tr
	is current one tr? NO
	where not?
	is there a built-up result? NO
        --> no rsf
        --> but will need a tree-wl
	present
        explain refactoring


- rename lot to tree-wl (just because)
- rewrite mref in fn-for-lot (pass remaining options as worklist)
- add t-wl to other fn
- rewrite mref in fn-for-t (be sure to ADD TO not replace worklist)

;; Tail recursion
(define (find-tree/tr t tn)
  ;; t-wl is (listof Tree)
  ;; worklist of pending trees to visit
  ;; the unvisited direct subs of all the visited trees
  ;; aka the upper left fringe of the unvisited part of original tree
  (local [(define (fn-for-t t t-wl)
            (local [(define name (node-name t))  ;unpack the fields
                    (define subs (node-subs t))] ;for convenience
              (if (string=? name tn)
                  t
                  (fn-for-lot (append subs t-wl)))))
          
          (define (fn-for-lot t-wl)
            (cond [(empty? t-wl) false]
                  [else
                   (fn-for-t (first t-wl)
                             (rest t-wl))]))]
    
    (fn-for-t t empty)))


start going through pictures
      assign value of t-wl each time fn-for-t or fn-for-lot is called


get class to start one of three extra problems
