

5	clickers

1  B	30
2  A	30
3  C	30
4  C	30


show schedule page
do midterm clicker



	theory begins to pay where intuition might fail
	
	you've invested a lot in learning the core of the recipe
	in particular learning to work with templates based on
	recursive type theory - really pays off today, making
	programs that might otherwise be difficult actually be
	simple to write. 
	


15	ListOfString		present

15 	contains-canucks?	do/interactive

10	key recipe points

	 - arb sized data -> well formed SR type comment
	 - sr template rule
	 - SR - NR
	 - base test first
	 - at least two long
	 - both sides of conditionals
	 - base case
	 - combination
	 - trust the NR
	 - don't step it in your head!


10	 sum	      	    	 class

5        sum			 interactive  (can move product here if plenty of time)

5	 count/product
          just a couple of points build out using the table
          1 not 0
	  Natural
	  1 not first

5 summarize recipe points



Canucks   "Canucks"
Flames	  "Flames"

arb number of them...

info in separate tab, get to (cons " " (cons " " empty)) then jump
to fully fledged version in starter

show the self-ref, work through a couple of data examples to show
they match the type comment

delete compound and self-ref parts of template and re-do to explain

say little or nothing about NR now

jump to function 


(@htdf contains-canucks?)
(@signature ListOfString -> Boolean)   
;; produce true if los contains "Canucks"

take suggestions for signature, empty test, "simplest non empty test"
then just do the 2 long tests


(check-expect (contains-canucks? empty) false)
(check-expect (contains-canucks? (cons "Canucks" (cons "Flames" empty))) true)
(check-expect (contains-canucks? (cons "Flames" (cons "Canucks" empty))) true)
(check-expect (contains-canucks? (cons "Flames" (cons "Leafs" empty)))   false)

;(define (contains-canucks? los) false)

(@template-origin ListOfString)  

rename the natural recursion during template copy, will see why later

(@template
 (define (contains-canucks? los)
  (cond [(empty? los) (...)]
        [else 
         (... (first los)
              (contains-canucks? (rest los)))])))

take suggestion for base case result
then show how the three examples show there are two cases:
  - "Canucks" is first
  - maybe it's in rest

(define (contains-canucks? los)
  (cond [(empty? los) false]
        [else

Just add if and string=? and true.
"or produce result of looking in the rest" (declarative statement)

         (if (string=? (first los) "Canucks")
             true      
             (contains-canucks? (rest los)))]))

Can TRUST RNR if...
so work by assuming RNR is correct and working with it the RESULT

put up 2 slides summarizing how the recipe has changed

talk about how the theory says that if we get base and combination right then RNR will be right and function will be right.

talk about how this declarative understanding is more powerful than stepwise evaluation, and will be essntial for problems later in the term


;; poll at about 4
;; give them to about 6
;; then PASTE IN solution
;;
;; Design a function that computes the sum of a list of numbers.
;; 

(@htdf sum)
(@signature ListOfNumber -> Number)
;; produce the sum of a list of numbers
(check-expect (sum empty) 0)
(check-expect (sum (cons 1 (cons 2 (cons 3 empty)))) (+ 1 2 3 0))
(check-expect (sum (cons 9.1 (cons 5.2 (cons 7 empty)))) (+ 9.1 5.2 7))

;(define (sum lon) 0)

(@template-origin ListOfNumber)

(@template
 (define (sum lon)
   (cond [(empty? lon) (...)]
         [else
          (... (first lon)
               (sum (rest lon)))])))

(define (sum lon)
  (cond [(empty? lon) 0]
        [else
         (+ (first lon)
            (sum (rest lon)))]))


(@problem 2)
;; just note that empty --> 1
;; that's domain knowledge you might not know


(@problem 3)
;; just leave a note that result type is Natural

(@problem 4)

leave this for them
