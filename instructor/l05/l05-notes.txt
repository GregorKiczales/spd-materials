

Poll questions

1-   cheating is not a victimless crime
2- D terminology, constructors combine, selectors take apart
3- A compound data are values like any other values
4- D if we move as much as we should is it too far
     if so stop at boundary
     otherwise move as much as we should

     do not show how to write with min it confuses with compound data
     can do that later in the term



reverse engineer  present
revise dd         interactive

tock              give 3 tests, then class   (v1 has this)


reverse-spider    load v2 and discuss        (v2 has this)
                  note origin is special in 2 ways

render            show and talk briefly      (solution has this)



Last lecture we got a bit more realistic in that the program got larger.  But it
was still a program that we designed from scratch.  In reality people rarely
design a program from scratch. They spend much more of their time improving an
existing program, either by fixing bugs, fixing performance, updating it to
match changes in surrounding programs, or adding new behaviour.

So today we are going to get a little more realistic by taking an existing
program and adding new behaviour.  We're going to get lucky this time, the
original program was well designed.  That isn't always the case.


Starter

Reverse engineer (find documents, or take notes)

review what we had

now re-do in red

plan add !!!

DD  y, dy, good examples



;; Spider, goes down screen with thread, changes dir on space and at top/bottom

(@htdw Spider)

;; =================
;; Constants:

(define WIDTH 400)
(define HEIGHT 600)

(define CTR-X (/ WIDTH 2))

(define SPIDER-RADIUS 10)

(define TOP (+ 0        SPIDER-RADIUS))
(define BOT (- HEIGHT 1 SPIDER-RADIUS))

(define MID (/ HEIGHT 2)) ;MOVE THIS UP HERE WHEN DOING DATA EXAMPLES

;; FIRST MARK SPEED WITH !!!, THEN DELETE IT
(define SPEED 2) ;!!! delete later

(define SPIDER-IMAGE (circle SPIDER-RADIUS "solid" "black"))

(define MTS (empty-scene WIDTH HEIGHT))


;; =================
;; Data definitions:
(@problem 1)
(@htdd Spider)
(define-struct spider (y dy))
;; Spider is (make-spider Number Number)
;; interp. y is spider's vertical position in screen coordinates (pixels)
;;         dy is velocity in pixels per tick, + is down, - is up
;; CONSTRAINT: to be visible, must be in
;;             [TOP, BOT] which is [SPIDER-RADIUS, HEIGHT - 1 - SPIDER-RADIUS]
(define S-TOP-D (make-spider TOP  3))   ;top going down
(define S-MID-D (make-spider MID  2))   ;middle going down
(define S-MID-U (make-spider MID -3))   ;middle going up
(define S-BOT-U (make-spider BOT -3))   ;bottom going up

LEAVE OLD TEMPLATE, THEN COMPARE, THIS GIVES SENSE OF WHAT THE WORK WILL BE

(@dd-template-rules compound);2 fields

(define (fn-for-spider s)
  (... (spider-y s)
       (spider-dy s)))


;; =================
;; Functions:

(@htdf main)
(@signature Spider -> Spider) 
;; start the world with (main S-TOP-D)
;; no tests for htdw-main template

(@template-origin htdw-main)

;; no @template for htdw-main template

(define (main s)
  (big-bang s                    ; Spider
    (on-tick   tock)             ; Spider -> Spider
    (to-draw   render)           ; Spider -> Image
    (on-key    reverse-spider))) ; Spider KeyEvent -> Spider




(@htdf tock)
(@signature Spider -> Spider)
;; move spider by dy, except change direction at bottom and top edges

;; top edge: doesn't touch TOP, just touches TOP, tries to go past TOP
(check-expect (tock (make-spider (+ TOP 3) -2)) (make-spider (+ TOP 1) -2))
(check-expect (tock (make-spider (+ TOP 3) -3)) (make-spider    TOP     3))
(check-expect (tock (make-spider (+ TOP 3) -4)) (make-spider    TOP     4))


;; UPDATE THESE TESTS IN PLACE - STUDENTS SHOULD DO ABOVE TESTS AND BELOW
;; bottom edge: doesn't touch BOT, just touches BOT, tries to go past BOT
(check-expect (tock (make-spider (- BOT 3) 2))  (make-spider (- BOT 1)  2))
(check-expect (tock (make-spider (- BOT 3) 3))  (make-spider    BOT    -3))
(check-expect (tock (make-spider (- BOT 3) 4))  (make-spider    BOT    -4))

;(define (tock s) s) ;stub

(@template-origin Spider)

;PUT THIS IN TO POINT OUT NEW TEMPLATE
(@template
 (define (tock s)
   (... (spider-y s)
        (spider-dy s))))

(define (tock s)
  (cond [(<= (+ (spider-y s) (spider-dy s)) TOP)
         (make-spider TOP (- (spider-dy s)))]
        [(>= (+ (spider-y s) (spider-dy s)) BOT)
         (make-spider BOT (- (spider-dy s)))]
        [else
         (make-spider (+ (spider-y s) (spider-dy s))
                      (spider-dy s))]))
        

;; goes at end of file

(@htdf reverse-spider)
(@signature Spider KeyEvent -> Spider)
;; change direction of spider on space, unchanged for other keys
(check-expect (reverse-spider (make-spider 100  2) " ") (make-spider 100 -2))
(check-expect (reverse-spider (make-spider 200 -3) " ") (make-spider 200  3))
(check-expect (reverse-spider (make-spider 100  2) "a") (make-spider 100  2))

;(define (reverse-spider s ke) s)

(@template-origin KeyEvent ;using large enumeration rule
                  Spider)  ;to get Spider selectors in cond answer

(@template 
 (define (reverse-spider s ke)
  (cond [(key=? ke " ") (... (spider-y s) (spider-dy s))]
        [else (... (spider-y s) (spider-dy s))])))

(define (reverse-spider s ke)
  (cond [(key=? ke " ") (make-spider (spider-y s) (- (spider-dy s)))]
        [else s]))



;; highlight add-line if time


(@htdf render)
(@signature Spider -> Image) 
;; place SPIDER-IMAGE and thread image on MTS, at spider's y coordinate
(check-expect (render S-MID-D)
              (add-line (place-image SPIDER-IMAGE CTR-X (spider-y S-MID-D) MTS)
                        CTR-X 0
                        CTR-X (spider-y S-MID-D)
                        "black"))

(check-expect (render (make-spider 36 -10))
              (add-line (place-image SPIDER-IMAGE CTR-X 36 MTS)
                        CTR-X 0
                        CTR-X 36
                        "black"))

;(define (render s) MTS)

(@template-origin Spider)

(@template
 (define (render s)
   (... (spider-y s)
        (spider-dy s))))
  
(define (render s)
  (add-line (place-image SPIDER-IMAGE
                         CTR-X
                         (spider-y s)
                         MTS)
            CTR-X 0
            CTR-X (spider-y s)
            "black"))

