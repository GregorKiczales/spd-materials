
clickers


where we are in the course

accumulator overview - will understand all these words more soon

sequence?  present

 work up to wanting to fill in <previous>
 put accumulator design slide up
 note acc refactoring will be on video
 stress example progression
   work beginning to end progression of arb-sized-data arg
   then work backward for accumulator
     wish for final value
     push that backwards


context preserving accumulator

(@htdf sequence?)

(@signature (listof Natural) -> Boolean)
;; produces true if every element of lon is 1 greater than prior element
(check-expect (sequence? (list))       true)
(check-expect (sequence? (list 2))     true)
(check-expect (sequence? (list 2 3 4)) true)
(check-expect (sequence? (list 3 5 6)) false)
(check-expect (sequence? (list 2 3 4 7 5)) false)

(@template-origin (listof Natural) accumulator)

(define (sequence? lon0)
  ;; prev is  Natural
  ;; invariant: the element of lon0 immediately before (first lon)
  ;; (sequence? (list 2 3 4 7 5))
  
  ;; (sequence? (list   3 4 7 5) 2)  
  ;; (sequence? (list     4 7 5) 3)
  ;; (sequence? (list       7 5) 4) ==> false
  (local [(define (sequence? lon prev)
            (cond [(empty? lon) true]     
                  [else           
                   (if (= (first lon) (+ 1 prev)) ;exploit (use)
                       (sequence? (rest lon)
                                  (first lon))    ;preserve
                       false)]))]

    (if (empty? lon0)                ;if original list is empty, we can't
        true                         ;initialize accumulator, so special case
        (sequence? (rest lon0)     
                   (first lon0)))))  ;initialize





bst?  class
hand problem to them no later than -40:00
take it back to complete at -15:00

interruptions:
  for picture
  how many accumulators
  -inf.0 +inf.0


(define (bst? bt0)
  
  ;; lower is Integer
  ;;   lower bound of key at current node
  ;;   initially -inf.0 is reset on recursions down a right branch
  ;; upper is Integer
  ;;   upper bound of key at current node
  ;;   initially +inf.0 is reset on recursions down a left branch
  ;; 
  ;; <see diagram for example progression>
  (local [(define (bst? bt lower upper)
            (cond [(false? bt) true]
                  [else
                   (and (< lower (node-k bt) upper)                  ;exploit
                        (bst? (node-l bt)  lower        (node-k bt)) ;preserve
                        (bst? (node-r bt)  (node-k bt)  upper))]))]  ;preserve
    
    (bst? bt0 -inf.0 +inf.0)));                                      ;initialize
;;                            ;NOTE that we would never expect you to have
;;                            ;     already known about these two constants!


