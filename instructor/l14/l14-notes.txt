
intro slide


Clickers during lecture.

     foldr [present fn-defn, tests]
     foldr [interactive signature]

     clicker 1 freebee
     clicker 2
     clicker 3

:25  fold-course
     fn-defn   [present]
     copy      [interactive, use slide]
     count     [interactive, use slide]
     signature [interactive]
     purpose   [present]

:45  all-course-numbers [class]

  clicker 4

  total-credits [later]

  courses-w-credits [interactive, present]

  find-course [interactive, present]


(@htdf foldr2)
(@signature (X Y -> Y) Y (listof X) -> Y)
;; from fn b (list x0 x1...) produce (fn x0 (fn x1 ... b))
(check-expect (foldr2 cons empty (list 1 2 3)) (list 1 2 3))
(check-expect (foldr2 cons
                      empty
                      (cons 1 (cons 2 (cons 3 empty))))
              (cons 1 (cons 2 (cons 3 empty))))

(check-expect (foldr2 + 0 (list 1 2 3)) 6)
(check-expect (foldr2 * 1 (list 2 3 4)) 24)
(check-expect (foldr2 string-append "" (list "foo" "bar" "baz"))
              "foobarbaz")
(check-expect (local [(define (+to-string s y)
                        (string-append (number->string s) y))]
                (foldr2 +to-string "" (list 1 37 65)))
              "13765")

(@template-origin (listof X))

(define (foldr2 fn b lox)
  (cond [(empty? lox) b]
        [else     
         (fn (first lox)
             (foldr2 fn b (rest lox)))]))






(@htdf fold-course)

;; abstract fold for Course
(check-expect (fold-course make-course cons empty C110) C110)
(check-expect (local [(define (c1 n cr rmr) (add1 rmr))
                      (define (c2 rmr rnr) (+ rmr rnr))
                      (define b1 0)]
                (fold-course c1 c2 b1 C110))
              20)





PRESENT

INTERACTIVE (show adding X and Y, start with first line)
(@signature _ _ _ _ -> _)
(@signature (_ _ _ -> _) _ _ _ -> _)
(@signature (_ _ _ -> _) (_ _ -> _) _ _ -> _)
(@signature (_ _ _ -> X) (_ _ -> Y) _ _ -> _)
(@signature (Natural Natural Y -> X) (_ _ -> Y) _ _ -> _)
(@signature (Natural Natural Y -> X) (X Y -> Y) _ _ -> _)
(@signature (Natural Natural Y -> X) (X Y -> Y) Y _ -> _)
(@signature (Natural Natural Y -> X) (X Y -> Y) Y Course -> X)
(@signature (Natural Natural Y -> X) (X Y -> Y) Y Course -> X)




CLASS (set them up to use template first)

(@htdf all-course-numbers)
(@signature Course -> ListOfNatural)
;; produce a list of all course numbers in given tree
(check-expect (all-course-numbers C100) (list 100))
(check-expect (all-course-numbers C213) (list 213 313 317))
(check-expect (all-course-numbers C210)
              (list 210 213 313 317 221 304 313
                    314 317 320 322 310 319 311 312))

(@template-origin use-abstract-fn)

(define (all-course-numbers c)
  (local [(define (c1 num credits rmr) (cons num rmr))]
    (fold-course c1 append empty c)))


sketch up on slide, finish
LATER

(@htdf total-credits)
(@signature Course -> Natural)
;; produce the total number of credits in a course tree
(check-expect (total-credits C100) 3)
(check-expect (total-credits C110) 64)

(@template-origin use-abstract-fn)


(define (total-credits c)
  (local [(define (c1 number credits rmr) (+ CREDITS RMR))
          (define (c2 rmr rnr) (+ RMR RNR))
          (define b1 0)]
    (fold-course c1 c2 b1 c)))



CLASS up through markup templates
then present what to use for course ???
--> can't use fold fn to get original compound data values

(@htdf courses-w-credits)
(@signature Course Natural -> (listof Course))
;; produce list of courses in tree that have >= credits
(check-expect (courses-w-credits C100 4) empty)
(check-expect (courses-w-credits C100 3) (list C100))
(check-expect (courses-w-credits C100 2) (list C100))
(check-expect (courses-w-credits C110 3)
              (list C110 C203 C210 C213 C313 C317 C221 C304 C313 C314 C317 C320
                    C322 C310 C319 C311 C312 C302 C303))


#|
;; we can't do this with fold-course! 

(@template-origin use-abstract-fn)

(define (courses-w-credits c0 n)
  (local [(define (c1 number credits rmr)
            (if (>= credits n)
                (cons <<course>> rmr)      ;<<<don't have the course to put here!
                rmr))
          (define c2 append)
          (define b1 empty)]
    (fold-course c1 c2 b1 c0)))

;; Instead we have templates with the original encapsulated type templates
|#


CLASS/PRESENT, but be sure to get to showing that the fold function goes all the way each time
--> can't use fold if you want only partial traversal

(@htdf find-course)
(@signature Course Natural -> Natural or false)
;; search tree for course w/ given number; if found produce credits
(check-expect (find-course C189 189) 1)
(check-expect (find-course C189 210) false)
(check-expect (find-course C110 310) 4)
(check-expect (find-course C110 349) false)


#|
;; this produces the correct answer with the fold function, but it
;; searches the entire tree every time, rather than stopping when it
;; gets to the result it wants to find. So we should use the templates.

(@template-origin use-abstract-fn)

(define (find-course c0 n)
  (local [(define (c1 num creds rmr)
            (if (= num n)
                creds
                rmr))
          (define (c2 rmr rnr)
            (if (not (false? rmr))
                rmr
                rnr))]

    (fold-course c1 c2 false c0)))
|#

