

clicker questions

htdf recipe intro

topple

tall?

image>


go right into first iclicker, like 15 seconds after start

check-in on prework...
  questions, as iclickers
  answering helps produce learning

[skipped contract because was in intro slides, remove from intro, do here]

Evaluation rules are essential
  need them when debugging
  the program isn't doing what it is supposed to
  so you need to work out what it actually is doing

  can use the stepper to check (but not in exams)

HtDF
  core of the course, will use 100s of times
  will learn a little more about it each time
  crawl, walk... run
  recipe pages (must study carefully, this is the reference text)
  checklist (a reminder of the steps, not an understanding of them)


Present, with questions as we go
  topple
    setup recipe page (read later)
    recipe checklist on screen (it's a CHECKLIST, not explanation)
    annotate markup page with
      metadata (about the program, checkable, used by top companies)
      @signature Consume ... -> Produce
      at least two tests
      @template-origin source of template | gets more interesting next week
      @template copy of template
      
    post dev markup for review

(@htdf topple)
(@signature Image -> Image)
;; produce image rotated by 90 degrees
(check-expect (topple (rectangle 10 20 "solid" "red"))
              (rectangle 20 10 "solid" "red"))
(check-expect (topple (triangle 20 "solid" "red"))
              (rotate 90 (triangle 20 "solid" "red")))

;(define (topple img) empty-image) ;stub

(@template-origin Image)

(@template
 (define (topple img)
   (... img)))

(define (topple img)
  (rotate 90 img))



class
  tall?
  interrupt to discuss each of the following
  yes/no question means produce Boolean
  produce Boolean means name ends in ?
  what's the boundary?
  vary both x and y
  aha there's an ambiguity - resolve and document and test

(@htdf tall?)
(@signature Image -> Boolean)
;; produce true if image is tall (height > width)
(check-expect (tall? (rectangle 10 20 "outline" "black")) true)
(check-expect (tall? (rectangle 10  9 "outline" "black")) false)
(check-expect (tall? (rectangle 10 10 "outline" "black")) false)
(check-expect (tall? (rectangle 10 11 "outline" "black")) true)
(check-expect (tall? (rectangle 30 20 "outline" "black")) false)

;(define (tall? i) false) ;stub

(@template-origin Image)

(@template
 (define (tall? i)
   (... i)))

(define (tall? i)
  (> (image-height i) (image-width i)))


at home
  image>? (note new name)
  because they do it at home we provide them with htdf tag, signature, stub, template-origin, and template

